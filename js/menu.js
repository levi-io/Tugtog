// Generated by LiveScript 1.2.0
var LinearLayout, Button, TextButton, ImageButton;
LinearLayout = (function(){
  LinearLayout.displayName = 'LinearLayout';
  var prototype = LinearLayout.prototype, constructor = LinearLayout;
  function LinearLayout(elems, x, y, spacing, orientation){
    var ints, res$, i$, step$, to$, ridx$, elemPair, len$, elem;
    this.elems = elems;
    this.x = x;
    this.y = y;
    this.spacing = spacing;
    this.orientation = orientation != null ? orientation : 'vertical';
    switch (this.orientation) {
    case 'vertical':
      res$ = [];
      for (i$ = this.y, to$ = this.y + this.spacing * this.elems.length, step$ = this.spacing; step$ < 0 ? i$ >= to$ : i$ <= to$; i$ += step$) {
        ridx$ = i$;
        res$.push(ridx$);
      }
      ints = res$;
      elemPair = zip(this.elems, ints);
      for (i$ = 0, len$ = elemPair.length; i$ < len$; ++i$) {
        elem = elemPair[i$];
        elem[0].y = elem[1];
        elem[0].x = this.x;
      }
      break;
    case 'horizontal':
      res$ = [];
      for (i$ = this.x, to$ = this.x + spacing * this.elems.length, step$ = this.spacing; step$ < 0 ? i$ >= to$ : i$ <= to$; i$ += step$) {
        ridx$ = i$;
        res$.push(ridx$);
      }
      ints = res$;
      elemPair = zip(this.elems, ints);
      for (i$ = 0, len$ = elemPair.length; i$ < len$; ++i$) {
        elem = elemPair[i$];
        elem[0].y = this.y;
        elem[0].x = elem[1];
      }
    }
  }
  return LinearLayout;
}());
Button = (function(){
  Button.displayName = 'Button';
  var prototype = Button.prototype, constructor = Button;
  function Button(){}
  return Button;
}());
TextButton = (function(superclass){
  var prototype = extend$((import$(TextButton, superclass).displayName = 'TextButton', TextButton), superclass).prototype, constructor = TextButton;
  function TextButton(text, x, y, callback, arg){
    this.text = text;
    this.x = x;
    this.y = y;
    this.callback = callback;
    this.arg = arg != null ? arg : null;
  }
  prototype.isEventWithinBounds = function(event, ctx){
    var metrics, width, x, y, ref$;
    metrics = ctx.measureText(this.text);
    width = metrics.width;
    x = this.x;
    y = this.y;
    return (x <= (ref$ = event.clientX) && ref$ <= width + x) && (y <= (ref$ = event.clientY) && ref$ <= 24 + y);
  };
  prototype.draw = function(ctx){
    ctx.fillStyle = "white";
    ctx.textAlign = "left";
    ctx.textBaseline = "top";
    ctx.font = "24px 'Action Man'";
    return ctx.fillText(this.text, this.x, this.y);
  };
  return TextButton;
}(Button));
ImageButton = (function(superclass){
  var prototype = extend$((import$(ImageButton, superclass).displayName = 'ImageButton', ImageButton), superclass).prototype, constructor = ImageButton;
  function ImageButton(sprite, x, y, callback, arg){
    this.sprite = sprite;
    this.x = x;
    this.y = y;
    this.callback = callback;
    this.arg = arg != null ? arg : null;
  }
  prototype.isEventWithinBounds = function(event, ctx){
    var x, y, ref$;
    x = this.x + settings.cX;
    y = this.y + settings.cY;
    return (x <= (ref$ = event.clientX) && ref$ <= this.sprite.width + x) && (y <= (ref$ = event.clientY) && ref$ <= this.sprite.height + y);
  };
  prototype.draw = function(ctx){
    return ctx.drawImage(this.sprite, this.x, this.y);
  };
  return ImageButton;
}(Button));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}