// Generated by LiveScript 1.2.0
var Lane, PerspLane;
Lane = (function(){
  Lane.displayName = 'Lane';
  var prototype = Lane.prototype, constructor = Lane;
  function Lane(key, x, w){
    this.key = key;
    this.x = x;
    this.w = w;
    this.y = 0;
    this.h = settings.screenH;
    this.opacity = 0;
    this.start = settings.startline;
    this.end = settings.finishline;
  }
  prototype.draw = function(ctx){
    ctx.strokeStyle = "gray";
    ctx.strokeRect(this.x, this.y, this.w, this.h);
    ctx.globalAlpha = this.opacity;
    ctx.fillStyle = "white";
    ctx.fillRect(this.x, this.y, this.w, this.h);
    return ctx.globalAlpha = 1;
  };
  return Lane;
}());
PerspLane = (function(superclass){
  var prototype = extend$((import$(PerspLane, superclass).displayName = 'PerspLane', PerspLane), superclass).prototype, constructor = PerspLane;
  function PerspLane(key, x, w, vp, ap){
    this.key = key;
    this.x = x;
    this.w = w;
    this.vp = vp;
    this.ap = ap;
    PerspLane.superclass.apply(this, arguments);
    this.l1 = new ImplicitLine(new Vector(this.x, this.end), this.vp);
    this.l2 = new ImplicitLine(new Vector(this.x + this.w, this.end), this.vp);
    this.x1 = this.l1.findX(this.start);
    this.x2 = this.l2.findX(this.start);
    this.x1e = this.l1.findX(this.end);
    this.x2e = this.l2.findX(this.end);
    this.char = new Character((this.x1 + this.x2) / 2, settings.startline - 188);
  }
  prototype.draw = function(ctx){
    ctx.beginPath();
    ctx.moveTo(this.x1e, this.end);
    ctx.lineTo(this.x1, this.start);
    ctx.lineTo(this.x2, this.start);
    ctx.lineTo(this.x2e, this.end);
    ctx.lineTo(this.x1e, this.end);
    ctx.globalAlpha = this.opacity;
    ctx.fillStyle = 'white';
    ctx.fill();
    return ctx.globalAlpha = 1;
  };
  return PerspLane;
}(Lane));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}